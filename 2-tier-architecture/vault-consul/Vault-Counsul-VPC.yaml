AWSTemplateFormatVersion: "2010-09-09"
Description: Nested stack - The VPC template. 

Parameters:
  # AvailabilityZones:
  #   Type: List<AWS::EC2::AvailabilityZone::Name>
  #   Description: The list of Availability Zones to use for the subnets in the VPC.

  VPCName:
    Type: String
    Description: The name of the VPC.
    Default: Vault-Consul-VPC

  VPCCidr:
    Type: String
    Description: The CIDR block for the VPC.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16

  PublicSubnet1Cidr:
    Type: String
    Description: The CIDR block for the public subnet located in Availability Zone 1.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/24

  PublicSubnet2Cidr:
    Type: String
    Description: The CIDR block for the public subnet located in Availability Zone 2.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.1.0/24

  PrivateSubnet1Cidr:
    Type: String
    Description: The CIDR block for the public subnet located in Availability Zone 1.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.100.0/24

  PrivateSubnet2Cidr:
    Type: String
    Description: The CIDR block for the public subnet located in Availability Zone 2.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.101.0/24  

Resources:
  VPC: #creating a VPC
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Ref VPCName

  VCFrontendSubnet1: #creating front-end subnet
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnet1Cidr
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: FrontEnd-Subnet1
        - Key: subnet-type.0.0/16
          Value: Public  

  VCFrontendSubnet2: #creating front-end subnet
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicSubnet2Cidr
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: FrontEnd-Subnet2
        - Key: subnet-type
          Value: Public        

  VCBackEndSubnet1: #creating back-end subnet
    Type: AWS::EC2::Subnet
    Properties: 
      CidrBlock: !Ref PrivateSubnet1Cidr
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: BackEnd-Subnet1
        - Key: subnet-type
          Value: Private

  VCBackEndSubnet2: #creating back-end subnet
    Type: AWS::EC2::Subnet
    Properties: 
      CidrBlock: !Ref PrivateSubnet2Cidr
      VpcId: !Ref VPC
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: BackEnd-Subnet2
        - Key: subnet-type
          Value: Private          

  VPCPublicRouteTable: #creating a public route table
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public-rt

  VPCPrivateRouteTable: #creating a private route table
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private-rt    

  VPCIGW: #creating an Internet gateway
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: VPCIGW

  VPCGWAttachment: #attaching IGW to the vpc
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: VPCIGW

  PubicRoute: #associate  IGW to public rt
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VPCPublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref VPCIGW
    DependsOn:
      - VPCGWAttachment

  VCFrontendSubnet1RouteAssociation: #associate frontend with public rt
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPublicRouteTable
      SubnetId:
        Ref: VCFrontendSubnet1

  VCFrontendSubnet2RouteAssociation: #associate frontend with public rt
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPublicRouteTable
      SubnetId:
        Ref: VCFrontendSubnet2

  VCBackEndSubnet1RouteAssociation: #associate backend with private rt
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPrivateRouteTable
      SubnetId:
        Ref: VCBackEndSubnet1

  VCBackEndSubnet2RouteAssociation: #associate backend with private rt
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPrivateRouteTable
      SubnetId:
        Ref: VCBackEndSubnet2

  NAT: #Adding NAT gateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
         Fn::GetAtt:
          - NatGatewayEIP
          - AllocationId
      SubnetId:
          Ref: VCFrontendSubnet1
      Tags:
        - Key: Name
          Value: VPC-NAT-Gateway

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties: 
      Domain: vpc
    DependsOn: VPCGWAttachment

  PrivateRoute: #edit rout table routes to associate NAT gateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref VPCPrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NAT

  # VpnGateway: #Add VPN gateway
  #   Type: AWS::EC2::VPNGateway
  #   Properties: 
  #     Type: ipsec.1
  #     Tags: 
  #     - Key: Use
  #       Value: Test
  
  # S3Endpoint: #Add VPC endpoint
  #   Type: AWS::EC2::VPCEndpoint
  #   Properties:
  #     RouteTableIds:
  #       - !Ref VPCPublicRouteTable
  #       - !Ref VPCPrivateRouteTable
  #     VpcId: !Ref VPC
  #     ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3" 

Outputs:
  VpcId:
    Value: 
      Ref: VPC
    Export:
      Name: vault-consul-vpc-VpcId

  VCFrontendSubnet1:
    Value: 
      Ref: VCFrontendSubnet1
    Export:
      Name: vault-consul-vpc-VCFrontendSubnet1

  VCFrontendSubnet2:
    Value: 
      Ref: VCFrontendSubnet2
    Export:
      Name: vault-consul-vpc-VCFrontendSubnet2      

  VCBackEndSubnet1:
    Value:
      Ref: VCBackEndSubnet1
    Export:
      Name: vault-consul-vpc-VCBackEndSubnet1

  VCBackEndSubnet2:
    Value:
      Ref: VCBackEndSubnet2   
    Export:
      Name: vault-consul-vpc-VCBackEndSubnet2
