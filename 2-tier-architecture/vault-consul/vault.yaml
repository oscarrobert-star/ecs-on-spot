AWSTemplateFormatVersion: "2010-09-09"
Description: Defines Ajua Vault system 

Parameters:
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: Provide VPC id where the Security groups should be created

  VPCCidr:
    Type: String
    Description: The CIDR block for the VPC.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16  

  AmiID:
    Type: AWS::EC2::Image::Id
    Description: 'The ID of the AMI.' # uses the latest ami id  
    Default: 'ami-0439e38cc09834325'

  EC2InstanceType:
    Type: String
    Description: Provide the desired instance type
    Default: t3.micro 
  
  KeyName: 
    Type: String
    Default: core-platform-key #this key exists in Ajua account af-south-1 region 

  Subnet1:  
    Type: AWS::EC2::Subnet::Id
    Description: 'The Subnet ID'

  Subnet2:  
    Type: AWS::EC2::Subnet::Id
    Description: 'The Subnet ID'  

Resources:
  vaultlaunchtemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: vault-Launch-Template
      LaunchTemplateData:
        InstanceType: 
          Ref: EC2InstanceType
        ImageId: 
          Ref: AmiID
        SecurityGroupIds: #add sg heres
          - Ref: SgId
        IamInstanceProfile: 
          Name: !ImportValue SSMInstanceProfile
        KeyName: !Ref KeyName
        BlockDeviceMappings:
          - Ebs:
              VolumeSize: 30 # put a desired volume
              VolumeType: gp3
            DeviceName: /dev/xvdcz  
        UserData: #add user data here 
          Fn::Base64: |
            #!/bin/bash
exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            # install updates
            # yum update -y #for centos
            sudo apt update -y

            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            
            # configure AWS CLI
            mkdir ~/.aws
            cat > ~/.aws/config<< EOF
            [default]
            region = ${AWS::Region}
            EOF

            REGION=`curl -s http://169.254.169.254/latest/meta-data/placement/region`

            sudo /opt/consul/bin/run-consul --client --cluster-tag-key "Consul" --cluster-tag-value "Consul" 

            readonly VAULT_TLS_CERT_FILE="/opt/vault/tls/vault.crt.pem"
            readonly VAULT_TLS_KEY_FILE="/opt/vault/tls/vault.key.pem"

            #Initializes vault and does provide tokens
            # /opt/vault/bin/run-vault \
            #   --tls-cert-file "$VAULT_TLS_CERT_FILE" \
            #   --tls-key-file "$VAULT_TLS_KEY_FILE" \
            #   --enable-auto-unseal \
            #   --auto-unseal-kms-key-id "76f22bab-df9f-4c18-8539-808fe4a9172b" \
            #   --auto-unseal-kms-key-region "af-south-1"

            # Instaling vault manually
            sudo apt install unzip -y 

            wget https://releases.hashicorp.com/vault/1.10.1/vault_1.10.1_linux_amd64.zip
            unzip vault_1.10.1_linux_amd64.zip 

            sudo mv vault /usr/bin

            # Creating config files and systemd files for vault
            cat > /etc/systemd/system/vault.service<< EOF
            [Unit]
            Description=\"HashiCorp Vault - A tool for managing secrets\"
            Documentation=https://www.vaultproject.io/docs/
            Requires=network-online.target
            After=network-online.target
            ConditionFileNotEmpty=/opt/vault/config/default.hcl
            StartLimitIntervalSec=60
            StartLimitBurst=3
            [Service]
            User=vault
            Group=vault
            ProtectSystem=full
            ProtectHome=read-only
            PrivateTmp=yes
            PrivateDevices=yes
            SecureBits=keep-caps
            AmbientCapabilities=CAP_IPC_LOCK
            Capabilities=CAP_IPC_LOCK+ep
            CapabilityBoundingSet=CAP_SYSLOG CAP_IPC_LOCK
            NoNewPrivileges=yes
            ExecStart=/opt/vault/bin/vault server -config /opt/vault/config -log-level=info
            ExecReload=/bin/kill --signal HUP $MAINPID
            KillMode=process
            KillSignal=SIGINT
            Restart=on-failure
            RestartSec=5
            TimeoutStopSec=30
            StartLimitInterval=60
            StartLimitIntervalSec=60
            StartLimitBurst=3
            LimitNOFILE=65536
            LimitMEMLOCK=infinity

            [Install]
            WantedBy=multi-user.target
            EOF

            # Creating vault config files
            cat > /opt/vault/config/default.hcl<< EOF
            ui = true

            listener "tcp" {
              address         = "0.0.0.0:8200"
              cluster_address = "0.0.0.0:8201"
              tls_cert_file   = "/opt/vault/tls/vault.crt.pem"
              tls_key_file    = "/opt/vault/tls/vault.key.pem"
            }


            storage "consul" {
              address = "127.0.0.1:8500"
              path    = "vault/"
              scheme  = "http"
              service = "vault"
            }
            # HA settings
            cluster_addr  = "https://10.0.0.112:8201"
            api_addr      = "https://10.0.0.112:8200"
            EOF

            systemctl daemon-reload
            systemctl start vault
            sudo systemctl enable vault.service 

            sudo apt install snapd -y
            sudo snap install amazon-ssm-agent --classic -y

  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: VaultlASG
      MinSize: "1"
      MaxSize: "2"
      DesiredCapacity: "1"       
      HealthCheckGracePeriod: 300
      LaunchTemplate:
        LaunchTemplateId: 
          Ref: vaultlaunchtemplate
        Version: !GetAtt vaultlaunchtemplate.LatestVersionNumber
      # NewInstancesProtectedFromScaleIn: true  
      VPCZoneIdentifier:
        - Ref: Subnet1
        - Ref: Subnet2
      TargetGroupARNs: 
        - !Ref VaultTG
      Tags:
      -   Key: Name
          PropagateAtLaunch: true
          Value: Vault-server
      -   Key: Consul
          PropagateAtLaunch: true
          Value: Consul          
    
  SgId: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and https access into bridge
      VpcId: 
        Ref: VPCId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 8300
        ToPort: 8600
        CidrIp: !Ref VPCCidr   
      - IpProtocol: tcp
        FromPort: 8200
        ToPort: 8201
        CidrIp: !Ref VPCCidr

  ALBSgId:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and https access into bridge
      VpcId: 
        Ref: VPCId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0 
      - IpProtocol: tcp
        FromPort: 8200
        ToPort: 8200
        CidrIp: !Ref VPCCidr

  VaultALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
        IpAddressType: ipv4 # Allowed values: dualstack | ipv4
        SecurityGroups:
            - !Ref ALBSgId
        Scheme: internet-facing # Allowed values: internal | internet-facing
        Name: VaultALB
        Subnets:
            - Ref: Subnet1
            - Ref: Subnet2
        Type: application # Allowed values: application | gateway | network
        Tags:
            -
              Value: Vault-ALB 
              Key: Name

  VaultTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
        Port: 8200 
        Name: VaultTg
        VpcId: 
          Ref: VPCId
        HealthCheckPort: 8200 
        Protocol: HTTP
        Tags:
            -
              Value: Vault-Target-Group
              Key: Name            

  VaultListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
        # SslPolicy: string
        LoadBalancerArn: !Ref VaultALB
        Port: 443 # check port
        Protocol: HTTP
        DefaultActions:
            -
              TargetGroupArn: !Ref VaultTG
              Type: forward

  VaultListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
        ListenerArn: !Ref VaultListener
        Actions:
            -
              TargetGroupArn: !Ref VaultTG
              Type: forward
        Priority: 1       
        Conditions:
            - Field: path-pattern
              PathPatternConfig:
                  Values:
                    - "/ui/"  
               