AWSTemplateFormatVersion: "2010-09-09"
Description: Ajua Scheduler launch template and auto-scaling group

Parameters:
  EnvironmentType:
    Description: 'Specify the Environment type of the stack.'
    Type: String
    Default: Test
    AllowedValues:
      - Test
      - Prod
    ConstraintDescription: 'Specify either Test or Prod.'

  AmiID:
    Type: AWS::EC2::Image::Id
    Description: 'The ID of the AMI.' # uses the latest ami id  
    Default: 'ami-00e7df8df28dfa791' #ami-00e7df8df28dfa791

  EC2InstanceType:
    Type: String
    Description: Provide the desired instance type
    Default: t3.micro

  Subnet1:  
    Type: AWS::EC2::Subnet::Id
    Description: 'The Subnet ID'
  Subnet2:  
    Type: AWS::EC2::Subnet::Id
    Description: 'The Subnet ID' 

  SgId:
    Type: AWS::EC2::SecurityGroup::Id

  TargetGroupARNs:
    Type: String #should be list
    
  OperatorEMail:
    Description: EMail address to notify if there are any scaling operations
    Type: String
    AllowedPattern: ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: must be a valid email address.  
    Default: oscar.robert@ajua.com

  CPUPolicyTargetValue:
    Type: String
    Default: '80'  

  KeyName: 
    Type: String
    Default: core-platform-key #this key exists in Ajua account af-south-1 region   

  LoadBalancer:
    Type: String
    Description: Provides load balancer dns name  
  

Resources:
  schedulerlaunchtemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: scheduler-Launch-Template
      LaunchTemplateData:
        InstanceType: 
          Ref: EC2InstanceType
        ImageId: 
          Ref: AmiID
        SecurityGroupIds: #add sg heres
          - Ref: SgId
        IamInstanceProfile: 
          Name: !ImportValue SSMInstanceProfile
        KeyName: !Ref KeyName  #add key pair name here
        BlockDeviceMappings:
          - Ebs:
              VolumeSize: 15 # put a desired volume
              VolumeType: gp3
              DeleteOnTermination: true
              # Encrypted: true
              # KmsKeyId: !ImportValue KeyArn
            DeviceName: /dev/xvdcz  
        UserData: #add user data here 
          Fn::Base64: !Sub |
            #!/bin/bash
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            # install updates
            # yum update -y #for centos
            sudo apt update -y
            
            # configure AWS CLI for ec2-user
            mkdir ~/.aws
            cat > ~/.aws/config<< EOF
            [default]
            region = ${AWS::Region}
            EOF

            # install npm, nodejs, pm2, java
            # curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
            # sudo apt install -y nodejs
            # sudo npm install pm2@latest -g

            sudo apt install -y default-jre
            sudo apt install -y default-jdk

            # create log dirAWS::EC2::LaunchTemplate
            sudo mkdir /var/log/scheduler

            # create jar directory for the jar files
            sudo mkdir /opt/jar/
            
            # Scheduler service file
            cat > /etc/systemd/system/scheduler.service<< EOF
            [Unit]
            Description=Ajua Platform Scheduler

            [Service]
            WorkingDirectory=/opt/jar/
            Environment="CONFIGURATION_SERVER_HOST=${LoadBalancer}"
            ExecStart=/usr/bin/java -jar -Dspring.profiles.active=qa /opt/jar/scheduler-0.0.1-SNAPSHOT.jar
            Type=simple
            Restart=on-failure
            RestartSec=5s

            [Install]
            WantedBy=multi-user.target
            EOF

            ##instance information
            INSTANCE_ID=`curl -s http://169.254.169.254/latest/meta-data/instance-id`
            HOSTNAME=`hostname -i`
            REGION=`curl -s http://169.254.169.254/latest/meta-data/placement/region`

            # install code deploy agent
            sudo apt update -y
            sudo apt install ruby-full -y
            sudo apt install wget -y
            wget https://aws-codedeploy-$REGION.s3.$REGION.amazonaws.com/latest/install
            chmod +x ./install
            sudo ./install auto > /tmp/logfile

            # Install nginx 
            sudo apt install nginx -y 
            sudo systemctl start nginx.service

            
  schedulerASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: schedulerASG
      MinSize: "1"
      MaxSize: "4"
      DesiredCapacity: "1"        
      HealthCheckGracePeriod: 300
      LaunchTemplate:
        LaunchTemplateId: 
          Ref: schedulerlaunchtemplate
        Version: !GetAtt schedulerlaunchtemplate.LatestVersionNumber
      NewInstancesProtectedFromScaleIn: false  
      VPCZoneIdentifier:
        - Ref: Subnet1
        - Ref: Subnet2
      TargetGroupARNs: 
        - !Ref TargetGroupARNs
      Tags:
      -   Key: Name
          PropagateAtLaunch: true
          Value: !Join ["-", [scheduler, !Ref EnvironmentType ]] 
      NotificationConfigurations:
        - TopicARN: !Ref 'NotificationTopic'
          NotificationTypes: ['autoscaling:EC2_INSTANCE_LAUNCH', 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR',
            'autoscaling:EC2_INSTANCE_TERMINATE', 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR']
      
  schedulerScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref schedulerASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration: 
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref CPUPolicyTargetValue  

  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !Ref 'OperatorEMail'
        Protocol: email
      