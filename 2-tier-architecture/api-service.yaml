AWSTemplateFormatVersion: "2010-09-09"
Description: Ajua Api Service launch template and auto-scaling group

Parameters:
  EnvironmentType:
    Description: 'Specify the Environment type of the stack.'
    Type: String
    Default: Test
    AllowedValues:
      - Test
      - Prod
    ConstraintDescription: 'Specify either Test or Prod.'

  AmiID:
    Type: AWS::EC2::Image::Id
    Description: 'The ID of the AMI.' # uses the latest ami id
    Default: 'ami-00e7df8df28dfa791' #ami-00e7df8df28dfa791

  EC2InstanceType:
    Type: String
    Description: Provide the desired instance type
    Default: t3.micro

  Subnet1:
    Type: AWS::EC2::Subnet::Id
    Description: 'The Subnet ID'
  Subnet2:
    Type: AWS::EC2::Subnet::Id
    Description: 'The Subnet ID'

  SgId:
    Type: AWS::EC2::SecurityGroup::Id

  TargetGroupARNs:
    Type: String #should be list
    # Default: arn:aws:elasticloadbalancing:us-east-2:071046007207:targetgroup/TargetGroup1/4911679704360b5e #get from elb stack output

  OperatorEMail:
    Description: EMail address to notify if there are any scaling operations
    Type: String
    AllowedPattern: ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: must be a valid email address.
    Default: oscar.robert@ajua.com

  CPUPolicyTargetValue:
    Type: String
    Default: '80'

  KeyName:
    Type: String
    Default: core-platform-key #this key exists in Ajua account af-south-1 region

  LoadBalancer:
    Type: String
    Description: Provides load balancer dns name

Resources:
  apiservicelaunchtemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: ApiService-Launch-Template
      LaunchTemplateData:
        InstanceType:
          Ref: EC2InstanceType
        ImageId:
          Ref: AmiID
        SecurityGroupIds: #add sg heres
          - Ref: SgId
        IamInstanceProfile:
          Name: !ImportValue SSMInstanceProfile
        KeyName: !Ref KeyName
        BlockDeviceMappings:
          - Ebs:
              VolumeSize: 15 # put a desired volume
              VolumeType: gp3
              DeleteOnTermination: true
              # Encrypted: true
              # KmsKeyId: !ImportValue KeyArn
            DeviceName: /dev/xvdcz
        UserData: #add user data here
          Fn::Base64: !Sub |
            #!/bin/bash
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            # install updates
            # yum update -y #for centos
            sudo apt update -y

            sudo apt install awscli -y

            # configure AWS CLI for ubuntu
            mkdir ~/.aws
            cat > ~/.aws/config<< EOF
            [default]
            region = ${AWS::Region}
            EOF

            # install npm, nodejs, pm2, java
            # curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
            # sudo apt install -y nodejs
            # sudo npm install pm2@latest -g

            sudo apt install -y default-jre
            sudo apt install -y default-jdk

            sudo apt install -y jq

            stackname=${AWS::StackName}

            # Load balancer endpoint
            ALB_ENDPOINT=`aws cloudformation describe-stacks --region ${AWS::Region} | jq -r '.Stacks[] | select(.StackName | contains("'${AWS::StackName}'")) | .Outputs[] | select(.OutputKey | contains("LoadBalancerNames")) | .OutputValue'`


            # create log dir
            sudo mkdir /var/log/api_service
            sudo chmod 666 -R /var/log/api_service

            # create jar directory for the jar files
            sudo mkdir /opt/jar/
            sudo chmod 777 /opt/jar/

            # Api Service service file
            cat > /etc/systemd/system/api.service<< EOF
            [Unit]
            Description=Ajua Platform API service

            [Service]
            WorkingDirectory=/opt/jar/
            Environment="CONFIGURATION_SERVER_HOST=${LoadBalancer}"
            ExecStart=/usr/bin/java -jar -Dspring.profiles.active=qa /opt/jar/MsurveyAPI-0.0.1-SNAPSHOT.jar
            Type=simple
            Restart=on-failure
            RestartSec=5s

            [Install]
            WantedBy=multi-user.target
            EOF

            REGION=`curl -s http://169.254.169.254/latest/meta-data/placement/region`

            # install code deploy agent
            sudo apt update -y
            sudo apt install ruby-full -y
            sudo apt install wget -y
            wget https://aws-codedeploy-$REGION.s3.$REGION.amazonaws.com/latest/install
            chmod +x ./install
            sudo ./install auto > /tmp/logfile

            sudo apt install nginx -y
            sudo systemctl start nginx.service

  ApiServiceASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: ApiServiceASG
      MinSize: "0"
      MaxSize: "4"
      DesiredCapacity: "0"
      HealthCheckGracePeriod: 300
      LaunchTemplate:
        LaunchTemplateId:
          Ref: apiservicelaunchtemplate
        Version: !GetAtt apiservicelaunchtemplate.LatestVersionNumber
      NewInstancesProtectedFromScaleIn: false
      VPCZoneIdentifier:
        - Ref: Subnet1
        - Ref: Subnet2
      TargetGroupARNs:
        - !Ref TargetGroupARNs
      Tags:
      -   Key: Name
          PropagateAtLaunch: true
          Value: !Join ["-", [ApiService, !Ref EnvironmentType ]]
      NotificationConfigurations:
        - TopicARN: !Ref 'NotificationTopic'
          NotificationTypes: ['autoscaling:EC2_INSTANCE_LAUNCH', 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR',
            'autoscaling:EC2_INSTANCE_TERMINATE', 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR']

  ApiServiceScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref ApiServiceASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref CPUPolicyTargetValue

  NotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Endpoint: !Ref 'OperatorEMail'
        Protocol: email

Outputs:
  ApiServiceASG:
    Value: !Ref ApiServiceASG
