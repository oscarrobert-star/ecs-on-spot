AWSTemplateFormatVersion: "2010-09-09"
Description: Security groups for Ajua production stack

Parameters:
  VPCCidr:
    Type: String
    Description: The CIDR block for the VPC.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    # Default: 10.0.0.0/16

  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: Provide VPC id where the Security groups should be created

  PrivateSubnet1Cidr:
    Type: String
    Description: The CIDR block for the public subnet located in Availability Zone 1.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    # Default: 10.0.100.0/24

  PrivateSubnet2Cidr:
    Type: String
    Description: The CIDR block for the public subnet located in Availability Zone 2.
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    # Default: 10.0.101.0/24

Resources:
  BridgeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and https access into bridge
      VpcId:
        Ref: VPCId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65000
        SourceSecurityGroupId: !Ref ElbSg #!GetAtt ElbSg.GroupId
        # CidrIp: 0.0.0.0/
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: 6379
        ToPort: 6379
        CidrIp: !Ref VPCCidr

  ApiServiceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and https access into bridge
      VpcId:
        Ref: VPCId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65000
        SourceSecurityGroupId: !Ref ElbSg #!GetAtt ElbSg.GroupId
        # CidrIp: 0.0.0.0/
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: 6379
        ToPort: 6379
        CidrIp: !Ref VPCCidr
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        CidrIp: !Ref VPCCidr

  EngineSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and https access into bridge
      VpcId:
        Ref: VPCId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65000
        SourceSecurityGroupId: !Ref ElbSg #!GetAtt ElbSg.GroupId
        # CidrIp: 0.0.0.0/
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: 6379
        ToPort: 6379
        CidrIp: !Ref VPCCidr
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        CidrIp: !Ref VPCCidr

  SchedulerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and https access into bridge
      VpcId:
        Ref: VPCId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65000
        SourceSecurityGroupId: !Ref ElbSg #!GetAtt ElbSg.GroupId
        # CidrIp: 0.0.0.0/
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: 6379
        ToPort: 6379
        CidrIp: !Ref VPCCidr
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        CidrIp: !Ref VPCCidr

  ElbSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access from BridgeSecurityGroup
      VpcId:
        Ref: VPCId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 4041
        ToPort: 4041
        # SourceSecurityGroupId: !GetAtt ElbSg
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65000
        # SourceSecurityGroupId: !GetAtt ElbSg
        CidrIp: !Ref VPCCidr
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        # SourceSecurityGroupId: !GetAtt ElbSg
        CidrIp: 0.0.0.0/0

  CacheSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: cache
      VpcId: !Ref VPCId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 6379
        ToPort: 6379
        CidrIp: !Ref VPCCidr #'0.0.0.0/0'

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow access from back-end subnets to rds database
      VpcId:
        Ref: VPCId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        # SourceSecurityGroupId: !GetAtt ElbSg
        CidrIp: !Ref PrivateSubnet1Cidr
      - IpProtocol: tcp
        FromPort: 5432
        ToPort: 5432
        # SourceSecurityGroupId: !GetAtt ElbSg
        CidrIp: !Ref PrivateSubnet2Cidr

  BastionSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: cache
      VpcId: !Ref VPCId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref VPCCidr

  configServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: cache
      VpcId: !Ref VPCId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: '0.0.0.0/0'
      - IpProtocol: tcp
        FromPort: 8000
        ToPort: 9000
        CidrIp: '0.0.0.0/0'
        # CidrIp: !Ref VPCCidr


Outputs:
  BridgeSecurityGroupId:
    Value: !GetAtt BridgeSecurityGroup.GroupId

  RDSSecurityGroupGroupId:
    Value: !GetAtt RDSSecurityGroup.GroupId

  CacheSecurityGroupId:
    Value: !GetAtt CacheSecurityGroup.GroupId

  ApiServiceSGId:
    Value: !GetAtt ApiServiceSG.GroupId

  EngineSGId:
    Value: !GetAtt EngineSG.GroupId

  SchedulerSGId:
    Value: !GetAtt SchedulerSG.GroupId

  BastionSGId:
    Value: !GetAtt BastionSecurityGroup.GroupId

  configServerSGId:
    Value: !GetAtt configServerSecurityGroup.GroupId

  ElbSGId:
    Value: !GetAtt ElbSg.GroupId
