AWSTemplateFormatVersion: "2010-09-09"
Description: Defining load balancing in this template. This is a shared load balancer with path based routing

Parameters:
  # EnvironmentType:
  #   Description: 'Specify the Environment type of the stack.'
  #   Type: String
  #   Default: Test
  #   AllowedValues:
  #     - Test
  #     - Prod
  #   ConstraintDescription: 'Specify either Test or Prod.'
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: Provide VPC id where the Security groups should be created

  Subnet1:  
    Type: AWS::EC2::Subnet::Id
    Description: 'The Subnet ID'
  Subnet2:  
    Type: AWS::EC2::Subnet::Id
    Description: 'The Subnet ID' 

  SgId:
    Type: AWS::EC2::SecurityGroup::Id

Resources:
  SharedALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
        IpAddressType: ipv4 # Allowed values: dualstack | ipv4
        # SecurityGroups:
        #     - string
        # LoadBalancerAttributes:
            # - Key: load_balancing.cross_zone.enabled # enabled for network LB and gateway LB
            #   Value: true
        Scheme: internal # Allowed values: internal | internet-facing
        SecurityGroups: 
          - !Ref SgId
        Name: core-alb
        Subnets:
            - Ref: Subnet1
            - Ref: Subnet2
        Type: application # Allowed values: application | gateway | network
        # Tags:
        #     -
        #         Value: string 
        #         Key: string

  BridgeTG: # to be used for bridge later
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
        Port: 4041
        Name: BridgeTG
        VpcId: 
          Ref: VPCId
        # TargetGroupAttributes: # can be used to define stickiness and other attributes
        #     -
        #         Value: string
        #         Key: string
        HealthCheckPort: 80 #can change to suit your needs
        Protocol: HTTP
        # Tags:
        #     -
        #         Value: Bridge TG
        #         Key: Name

  ApiServiceTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
        Port: 8081 # change to apiservice port
        Name: ApiServiceTG
        VpcId: 
          Ref: VPCId
        # TargetGroupAttributes: # can be used to define stickiness and other attributes
        #     -
        #         Value: string
        #         Key: string
        HealthCheckPort: 80 #can change to apiservice port
        Protocol: HTTP
        # Tags:
        #     -
        #         Value: ApiService TG
        #         Key: Name      

  EngineTG:    
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
        Port: 8082 # change to apiservice port
        Name: EngineTG
        VpcId: 
          Ref: VPCId
        # TargetGroupAttributes: # can be used to define stickiness and other attributes
        #     -
        #         Value: string
        #         Key: string
        HealthCheckPort: 80 #can change to apiservice port
        Protocol: HTTP
        # Tags:
        #     -
        #         Value: Engine TG
        #         Key: Name     

  SchedulerTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
        Port: 7999 # change to apiservice port
        Name: SchedulerTG
        VpcId: 
          Ref: VPCId
        # TargetGroupAttributes: # can be used to define stickiness and other attributes
        #     -
        #         Value: string
        #         Key: string
        HealthCheckPort: 80 #can change to apiservice port
        Protocol: HTTP
        # Tags:
        #     -
        #         Value: Scheduler TG
        #         Key: Name    

  ConfigTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
        Port: 8888 # change to apiservice port
        Name: ConfigTG
        VpcId: 
          Ref: VPCId
        # TargetGroupAttributes: # can be used to define stickiness and other attributes
        #     -
        #         Value: string
        #         Key: string
        HealthCheckPort: 80 #can change to apiservice port
        Protocol: HTTP
        # Tags:
        #     -
        #         Value: ConfigTG
        #         Key: Name                      
  

  ListenerRule1: # Goes to bridge
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
        ListenerArn: !Ref ALBListener
        Actions:
            -
              TargetGroupArn: !Ref BridgeTG
              Type: forward
        Priority: 2
        Conditions:
            - Field: path-pattern
              PathPatternConfig:
                  Values:
                    - "/bridge/" #change this as appropriate

  ListenerRule2: # Goes to api-service
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
        ListenerArn: !Ref ALBListener
        Actions:
            -
              TargetGroupArn: !Ref ApiServiceTG
              Type: forward
        Priority: 1
        Conditions:
            - Field: path-pattern
              PathPatternConfig:
                  Values:
                    - "/api/" #change this as appropriate

  ListenerRule3: # Goes to engine
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
        ListenerArn: !Ref ALBListener
        Actions:
            -
              TargetGroupArn: !Ref EngineTG
              Type: forward
        Priority: 3
        Conditions:
            - Field: path-pattern
              PathPatternConfig:
                  Values:
                    - "/engine/" #change this as appropriate     

  ListenerRule4: # Goes to scheduler
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
        ListenerArn: !Ref ALBListener
        Actions:
            -
              TargetGroupArn: !Ref SchedulerTG
              Type: forward
        Priority: 4
        Conditions:
            - Field: path-pattern
              PathPatternConfig:
                  Values:
                    - "/scheduler/" #change this as appropriate    

  ListenerRule5: # Goes to config server
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
        ListenerArn: !Ref ALBListener
        Actions:
            -
              TargetGroupArn: !Ref ConfigTG
              Type: forward
        Priority: 5
        Conditions:
            - Field: path-pattern
              PathPatternConfig:
                  Values:
                    - "/config/" #change this as appropriate                                                                  

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
        # SslPolicy: string
        LoadBalancerArn: !Ref SharedALB
        Port: 80 # check port
        Protocol: HTTP
        DefaultActions:
            -
              TargetGroupArn: !Ref ApiServiceTG
              Type: forward

  BridgeListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
        # SslPolicy: string
        LoadBalancerArn: !Ref SharedALB
        Port: 4041 # check port
        Protocol: HTTP
        DefaultActions:
            -
              TargetGroupArn: !Ref BridgeTG
              Type: forward 

  ApiListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
        # SslPolicy: string
        LoadBalancerArn: !Ref SharedALB
        Port: 8081 # check port
        Protocol: HTTP
        DefaultActions:
            -
              TargetGroupArn: !Ref ApiServiceTG
              Type: forward     

  EngineListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
        # SslPolicy: string
        LoadBalancerArn: !Ref SharedALB
        Port: 8082 # check port
        Protocol: HTTP
        DefaultActions:
            -
              TargetGroupArn: !Ref EngineTG
              Type: forward          

  SchedulerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
        # SslPolicy: string
        LoadBalancerArn: !Ref SharedALB
        Port: 7999 # check port
        Protocol: HTTP
        DefaultActions:
            -
              TargetGroupArn: !Ref SchedulerTG
              Type: forward         

  configserverListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
        # SslPolicy: string
        LoadBalancerArn: !Ref SharedALB
        Port: 8888 # check port
        Protocol: HTTP
        DefaultActions:
            -
              TargetGroupArn: !Ref ConfigTG
              Type: forward        
        

Outputs:
  LoadBalancerNames:
    Value: !GetAtt SharedALB.DNSName

  BridgeTGArn: 
    Value: !Ref BridgeTG

  ApiServiceTGArn:
    Value: !Ref ApiServiceTG

  EngineTGArn:
    Value: !Ref EngineTG

  SchedulerTGArn:
    Value: !Ref SchedulerTG

  ConfigTGArn:
    Value: !Ref ConfigTG  