AWSTemplateFormatVersion: "2010-09-09"
Description: Ajua bridge launch template and auto-scaling group

Parameters:
  EnvironmentType:
    Description: 'Specify the Environment type of the stack.'
    Type: String
    Default: Test
    AllowedValues:
      - Test
      - Prod
    ConstraintDescription: 'Specify either Test or Prod.'

  AmiID:
    Type: AWS::EC2::Image::Id
    Description: 'The ID of the AMI.' # uses the latest ami id  
    Default: 'ami-00e7df8df28dfa791' #ami-00e7df8df28dfa791

  EC2InstanceType:
    Type: String
    Description: Provide the desired instance type
    Default: t3.micro #run t3.medium for production 

  Subnet1:  
    Type: AWS::EC2::Subnet::Id
    Description: 'The Subnet ID'
  Subnet2:  
    Type: AWS::EC2::Subnet::Id
    Description: 'The Subnet ID' 

  SgId:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Enter a valid security group ID

  TargetGroupARNs:
    Type: String #should be list
    # Default: arn:aws:elasticloadbalancing:us-east-2:071046007207:targetgroup/TargetGroup1/4911679704360b5e #get from elb stack output

  OperatorEMail:
    Description: EMail address to notify if there are any scaling operations
    Type: String
    AllowedPattern: ([a-zA-Z0-9_\-\.]+)@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.)|(([a-zA-Z0-9\-]+\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\]?)
    ConstraintDescription: must be a valid email address.  
    Default: oscar.robert@ajua.com

  CPUPolicyTargetValue:
    Type: String
    Default: '80'

  KeyName: 
    Type: String
    Default: core-platform-key #this key exists in Ajua account af-south-1 region   

  # LoadBalancer:
  #   Type: String
  #   Description: Provides load balancer dns name   

Resources:
  NotificationTopic:
      Type: AWS::SNS::Topic
      Properties:
        Subscription:
        - Endpoint: !Ref 'OperatorEMail'
          Protocol: email

  BridgeLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: Bridge-Launch-Template
      LaunchTemplateData:
        InstanceType: !Ref EC2InstanceType
        ImageId: 
          Ref: AmiID
        SecurityGroupIds: #add sg heres
          - Ref: SgId
        IamInstanceProfile: 
          Name: !ImportValue SSMInstanceProfile
        KeyName: !Ref KeyName 
        BlockDeviceMappings:
          - Ebs:
              VolumeSize: 15 # put a desired volume
              VolumeType: gp3
              DeleteOnTermination: true
              Encrypted: true
              # KmsKeyId: !ImportValue KeyArn
              # DeleteOnTermination: true
            DeviceName: /dev/xvdcz  
        UserData: #add user data here 
          Fn::Base64: |
            #!/bin/bash
            exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
            # install updates
            # yum update -y #for centos
            sudo apt update -y
            
            # configure AWS CLI for ec2-user / ubuntu
            mkdir /home/ubuntu/.aws
            cat > /home/ubuntu/.aws/config<< EOF
            [default]
            region = ${AWS::Region}
            EOF

            # prerequisites - nvm
            curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash
            wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash

            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

            source ~/.bashrc

            nvm install lts
            nvm install v11.10.0

            npm install -g yarn

            yarn global add pm2

            # create log dir
            sudo mkdir /var/log/bridge

            # build directory (builds from CI/CD)
            sudo mkdir /opt/Bridge

            # S3 logging scripts

            #Scripts for testing 


            ##instance information
            INSTANCE_ID=`curl -s http://169.254.169.254/latest/meta-data/instance-id`
            HOSTNAME=`hostname -i`
            REGION=`curl -s http://169.254.169.254/latest/meta-data/placement/region`            

            # install code deploy agent
            sudo apt update -y
            sudo apt install ruby-full -y
            sudo apt install wget -y
            wget https://aws-codedeploy-$REGION.s3.$REGION.amazonaws.com/latest/install
            chmod +x ./install
            sudo ./install auto > /tmp/logfile

            # Install nginx 
            sudo apt install nginx -y 
            sudo systemctl start nginx.service

          
  BridgeASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: BridgeASG
      MinSize: "1"
      MaxSize: "4"
      DesiredCapacity: "1"       
      HealthCheckGracePeriod: 60
      LaunchTemplate:
        LaunchTemplateId: 
          Ref: BridgeLaunchTemplate
        Version: !GetAtt BridgeLaunchTemplate.LatestVersionNumber
      NewInstancesProtectedFromScaleIn: false   
      VPCZoneIdentifier:
        - Ref: Subnet1
        - Ref: Subnet2
      TargetGroupARNs: 
        - !Ref TargetGroupARNs
      Tags:
      -   Key: Name
          PropagateAtLaunch: true
          Value: !Join ["-", [Bridge, !Ref EnvironmentType ]]
      -   Key: Environment
          PropagateAtLaunch: true
          Value: !Ref EnvironmentType

      NotificationConfigurations:
        - TopicARN: !Ref 'NotificationTopic'
          NotificationTypes: ['autoscaling:EC2_INSTANCE_LAUNCH', 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR',
            'autoscaling:EC2_INSTANCE_TERMINATE', 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR']
      
  BridgeScalingPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref BridgeASG
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration: 
        PredefinedMetricSpecification:
          PredefinedMetricType: ASGAverageCPUUtilization
        TargetValue: !Ref CPUPolicyTargetValue


# Outputs: 
